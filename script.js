/**
 * √âcoD√©cisions - Quiz √©cologique interactif avanc√©
 * 20 questions r√©parties en 5 cat√©gories avec scoring d√©taill√©
 */

// Configuration du jeu
const GAME_CONFIG = {
  totalQuestions: 20,
  questionsPerCategory: 4,
  minScore: -60,
  maxScore: 60,
}

// Variables globales pour les donn√©es
let QUIZ_QUESTIONS = []
let CATEGORIES = []

// √âtat du jeu
let gameState = {
  currentQuestion: 0,
  score: 0,
  answers: [],
  categoryScores: {},
  startTime: null,
}

/**
 * Charge les donn√©es depuis le fichier JSON
 */
async function loadQuizData() {
  try {
    const response = await fetch("questions.json")
    const data = await response.json()
    QUIZ_QUESTIONS = data.questions
    CATEGORIES = data.categories
    return true
  } catch (error) {
    console.error("Erreur lors du chargement des questions:", error)
    return false
  }
}

/**
 * M√©lange un tableau de mani√®re al√©atoire (algorithme Fisher-Yates)
 */
function shuffleArray(array) {
  const shuffled = [...array]
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
  }
  return shuffled
}

/**
 * Initialisation du jeu
 */
document.addEventListener("DOMContentLoaded", async () => {
  const dataLoaded = await loadQuizData()
  if (dataLoaded) {
    initializeGame()
    setupEventListeners()
  } else {
    alert("Erreur lors du chargement du quiz. Veuillez recharger la page.")
  }
})

/**
 * Configuration des √©couteurs d'√©v√©nements
 */
function setupEventListeners() {
  // √âcran d'accueil
  document.getElementById("start-btn").addEventListener("click", startQuiz)
  document.getElementById("rules-btn").addEventListener("click", showRules)
  document.getElementById("close-rules").addEventListener("click", hideRules)

  // Quiz
  document.getElementById("next-btn").addEventListener("click", nextQuestion)

  // R√©sultats
  document.getElementById("restart-btn").addEventListener("click", restartGame)
  document.getElementById("share-btn").addEventListener("click", shareResults)

  // Modal (clic en dehors pour fermer)
  document.getElementById("rules-modal").addEventListener("click", (e) => {
    if (e.target.id === "rules-modal") {
      hideRules()
    }
  })

  // Gestion du clavier
  document.addEventListener("keydown", handleKeyboard)
}

/**
 * Gestion des √©v√©nements clavier
 */
function handleKeyboard(event) {
  if (event.key === "Escape") {
    hideRules()
  }
}

/**
 * Initialise l'√©tat du jeu
 */
function initializeGame() {
  gameState = {
    currentQuestion: 0,
    score: 0,
    answers: [],
    categoryScores: {},
    startTime: null,
  }

  // Initialise les scores par cat√©gorie
  CATEGORIES.forEach((category) => {
    gameState.categoryScores[category.id] = {
      score: 0,
      maxScore: GAME_CONFIG.questionsPerCategory * 3,
      minScore: GAME_CONFIG.questionsPerCategory * -3,
    }
  })

  showScreen("welcome-screen")
}

/**
 * Affiche/cache les √©crans
 */
function showScreen(screenId) {
  document.querySelectorAll(".screen").forEach((screen) => {
    screen.classList.remove("active")
  })
  document.getElementById(screenId).classList.add("active")
}

/**
 * Affiche les r√®gles
 */
function showRules() {
  document.getElementById("rules-modal").style.display = "grid"
}

/**
 * Cache les r√®gles
 */
function hideRules() {
  document.getElementById("rules-modal").style.display = "none"
}

/**
 * D√©marre le quiz
 */
function startQuiz() {
  gameState.startTime = Date.now()
  showScreen("quiz-screen")
  loadQuestion(0)
}

/**
 * Charge une question
 */
function loadQuestion(questionIndex) {
  const question = QUIZ_QUESTIONS[questionIndex]
  const category = CATEGORIES.find((cat) => cat.id === question.category)

  // Met √† jour l'interface
  updateQuizHeader(questionIndex + 1)
  updateEcoGauge()

  // Affiche la question
  document.getElementById("category-badge").textContent = `${category.icon} ${category.name}`
  document.getElementById("question-text").textContent = question.question

  // G√©n√®re les choix
  generateChoices(question.choices)

  // Cache le feedback
  document.getElementById("feedback-card").style.display = "none"
  document.getElementById("question-card").style.display = "block"
}

/**
 * Met √† jour l'en-t√™te du quiz
 */
function updateQuizHeader(currentQuestionNumber) {
  const progressPercentage = (currentQuestionNumber / GAME_CONFIG.totalQuestions) * 100

  document.getElementById("question-counter").textContent =
    `Question ${currentQuestionNumber}/${GAME_CONFIG.totalQuestions}`
  document.getElementById("current-score").textContent = `Score: ${gameState.score}`
  document.getElementById("progress-fill").style.width = `${progressPercentage}%`
}

/**
 * Met √† jour la jauge √©cologique
 */
function updateEcoGauge() {
  // Calcule la position sur la jauge (0% = tr√®s n√©gatif, 100% = tr√®s positif)
  const normalizedScore =
    ((gameState.score - GAME_CONFIG.minScore) / (GAME_CONFIG.maxScore - GAME_CONFIG.minScore)) * 100
  const clampedScore = Math.max(0, Math.min(100, normalizedScore))

  document.getElementById("gauge-fill").style.width = `${clampedScore}%`
  document.getElementById("gauge-indicator").style.left = `${clampedScore}%`
}

/**
 * G√©n√®re les choix pour une question
 */
function generateChoices(choices) {
  const container = document.getElementById("choices-container")
  container.innerHTML = ""

  // M√©lange les choix pour √©viter que les mauvaises r√©ponses soient toujours en premier
  const shuffledChoices = shuffleArray(choices)

  shuffledChoices.forEach((choice, index) => {
    const choiceElement = document.createElement("div")
    choiceElement.className = "choice"
    choiceElement.innerHTML = `<span class="choice-text">${choice.text}</span>`

    choiceElement.addEventListener("click", () => selectChoice(index, choice))
    container.appendChild(choiceElement)
  })
}

/**
 * G√®re la s√©lection d'un choix
 */
function selectChoice(choiceIndex, choice) {
  // Marque le choix s√©lectionn√©
  document.querySelectorAll(".choice").forEach((el, index) => {
    el.classList.toggle("selected", index === choiceIndex)
  })

  // Enregistre la r√©ponse
  const currentQuestion = QUIZ_QUESTIONS[gameState.currentQuestion]
  gameState.answers.push({
    questionId: currentQuestion.id,
    category: currentQuestion.category,
    choice: choice,
    points: choice.points,
  })

  // Met √† jour les scores
  gameState.score += choice.points
  gameState.categoryScores[currentQuestion.category].score += choice.points

  // Met √† jour l'interface
  updateQuizHeader(gameState.currentQuestion + 1)
  updateEcoGauge()

  // Affiche le feedback apr√®s un d√©lai
  setTimeout(() => {
    showFeedback(choice.feedback)
  }, 800)
}

/**
 * Affiche le feedback
 */
function showFeedback(feedback) {
  // D√©termine l'ic√¥ne selon le type de feedback
  let icon = "üí°"
  if (
    feedback.title.includes("excellent") ||
    feedback.title.includes("parfait") ||
    feedback.title.includes("exemplaire")
  ) {
    icon = "üåü"
  } else if (feedback.title.includes("bon") || feedback.title.includes("bonne")) {
    icon = "üëç"
  } else if (
    feedback.title.includes("√©lev√©") ||
    feedback.title.includes("important") ||
    feedback.title.includes("majeur")
  ) {
    icon = "‚ö†Ô∏è"
  }

  document.getElementById("feedback-icon").textContent = icon
  document.getElementById("feedback-title").textContent = feedback.title
  document.getElementById("feedback-fact").textContent = feedback.fact

  // Affiche le feedback
  document.getElementById("question-card").style.display = "none"
  document.getElementById("feedback-card").style.display = "block"

  // Scroll vers le feedback
  document.getElementById("feedback-card").scrollIntoView({
    behavior: "smooth",
    block: "center",
  })
}

/**
 * Passe √† la question suivante
 */
function nextQuestion() {
  gameState.currentQuestion++

  if (gameState.currentQuestion < GAME_CONFIG.totalQuestions) {
    // Question suivante
    setTimeout(() => {
      loadQuestion(gameState.currentQuestion)
    }, 300)
  } else {
    // Quiz termin√©
    setTimeout(() => {
      showResults()
    }, 500)
  }
}

/**
 * Affiche les r√©sultats
 */
function showResults() {
  document.body.style.height = "auto"
  document.body.style.minHeight = "100vh"
  const resultContainers = document.querySelectorAll("#results-screen .container");
  resultContainers.forEach(container => {
    container.style.height    = "auto";
    container.style.minHeight = "100vh";
  })
  showScreen("results-screen")

  // Calcule et affiche le score final
  const finalScore = calculateFinalScore()
  animateScore(finalScore)

  // Affiche la cat√©gorie de score
  displayScoreCategory(finalScore)

  // G√©n√®re le graphique par cat√©gorie
  generateCategoryChart()

  // G√©n√®re les recommandations
  generateRecommendations()
}

/**
 * Calcule le score final en pourcentage
 */
function calculateFinalScore() {
  // Transforme le score de [-60, 60] vers [0, 100]
  return Math.round(((gameState.score - GAME_CONFIG.minScore) / (GAME_CONFIG.maxScore - GAME_CONFIG.minScore)) * 100)
}

/**
 * Anime l'affichage du score
 */
function animateScore(targetScore) {
  const scoreElement = document.getElementById("final-score")
  let currentScore = 0
  const increment = Math.ceil(targetScore / 60)

  const animation = setInterval(() => {
    currentScore += increment
    if (currentScore >= targetScore) {
      currentScore = targetScore
      clearInterval(animation)
    }
    scoreElement.textContent = currentScore
  }, 30)
}

/**
 * Affiche la cat√©gorie de score avec nouveau syst√®me de couleurs
 */
function displayScoreCategory(score) {
  const categoryElement = document.getElementById("score-category")
  const scoreCircle = document.getElementById("final-score").parentElement
  let category, background, scoreClass

  // Supprime toutes les classes de score existantes
  scoreCircle.classList.remove("score-excellent", "score-good", "score-neutral", "score-warning", "score-danger")

  if (score >= 80) {
    category = "üåü √âco-champion ! Impact tr√®s positif"
    background = "linear-gradient(135deg, #1e8449, #27ae60)"
    scoreClass = "score-excellent"
  } else if (score >= 60) {
    category = "üå± Bon √©co-citoyen ! Impact positif"
    background = "linear-gradient(135deg, #27ae60, #58d68d)"
    scoreClass = "score-good"
  } else if (score >= 40) {
    category = "‚öñÔ∏è Impact neutre, des am√©liorations possibles"
    background = "linear-gradient(135deg, #f1c40f, #f4d03f)"
    scoreClass = "score-neutral"
  } else if (score >= 20) {
    category = "‚ö†Ô∏è Impact n√©gatif, changements n√©cessaires"
    background = "linear-gradient(135deg, #f39c12, #f1c40f)"
    scoreClass = "score-warning"
  } else {
    category = "üö® Impact tr√®s n√©gatif, action urgente requise"
    background = "linear-gradient(135deg, #e74c3c, #f39c12)"
    scoreClass = "score-danger"
  }

  categoryElement.textContent = category
  categoryElement.style.background = background
  scoreCircle.classList.add(scoreClass)
}

/**
 * G√©n√®re le graphique par cat√©gorie avec barres Rouge-Vert synchronis√©es
 */
function generateCategoryChart() {
  const chartContainer = document.getElementById("category-chart")
  chartContainer.innerHTML = ""

  // Calcule la largeur du texte le plus long pour synchroniser les barres
  const tempDiv = document.createElement("div")
  tempDiv.style.visibility = "hidden"
  tempDiv.style.position = "absolute"
  tempDiv.style.fontSize = "0.9rem"
  tempDiv.style.fontWeight = "600"
  document.body.appendChild(tempDiv)

  let maxTextWidth = 0
  CATEGORIES.forEach((category) => {
    tempDiv.textContent = `${category.icon} ${category.name}`
    maxTextWidth = Math.max(maxTextWidth, tempDiv.offsetWidth)
  })
  document.body.removeChild(tempDiv)

  CATEGORIES.forEach((category) => {
    const categoryScore = gameState.categoryScores[category.id]
    const percentage = Math.round(
      ((categoryScore.score - categoryScore.minScore) / (categoryScore.maxScore - categoryScore.minScore)) * 100,
    )

    const categoryItem = document.createElement("div")
    categoryItem.className = "category-item"

    categoryItem.innerHTML = `
      <div class="category-name" style="width: ${maxTextWidth + 10}px;">${category.icon} ${category.name}</div>
      <div class="category-bar">
        <div class="category-bar-fill" style="width: ${percentage}%;"></div>
      </div>
      <div class="category-score">${percentage}%</div>
    `

    chartContainer.appendChild(categoryItem)
  })
}

/**
 * G√©n√®re les recommandations personnalis√©es
 */
function generateRecommendations() {
  const recommendationsContainer = document.getElementById("recommendations-list")
  recommendationsContainer.innerHTML = ""

  // Trouve les cat√©gories avec les scores les plus faibles
  const sortedCategories = CATEGORIES.map((category) => ({
    ...category,
    score: gameState.categoryScores[category.id].score,
    percentage: Math.round(
      ((gameState.categoryScores[category.id].score - gameState.categoryScores[category.id].minScore) /
        (gameState.categoryScores[category.id].maxScore - gameState.categoryScores[category.id].minScore)) *
        100,
    ),
  })).sort((a, b) => a.percentage - b.percentage)

  // Recommandations sp√©cifiques par cat√©gorie
  const recommendations = {
    transport: {
      title: "üöó Optimisez vos d√©placements",
      text: "Privil√©giez les transports en commun, le v√©lo ou la marche pour les trajets courts. Consid√©rez le covoiturage pour les longs trajets.",
    },
    alimentation: {
      title: "üçΩÔ∏è Repensez votre alimentation",
      text: "R√©duisez votre consommation de viande, privil√©giez les produits locaux et de saison, et planifiez vos repas pour √©viter le gaspillage.",
    },
    energie: {
      title: "‚ö° √âconomisez l'√©nergie",
      text: "Baissez votre chauffage d'1¬∞C, √©teignez vos appareils en veille et passez aux ampoules LED pour r√©duire votre consommation.",
    },
    dechets: {
      title: "‚ôªÔ∏è Am√©liorez votre gestion des d√©chets",
      text: "Triez rigoureusement, compostez vos d√©chets organiques et privil√©giez les achats en vrac avec vos propres contenants.",
    },
    consommation: {
      title: "üõí Consommez plus responsable",
      text: "Achetez moins mais mieux, privil√©giez la seconde main, r√©parez vos objets et √©vitez les achats impulsifs.",
    },
  }

  // G√©n√®re 5 recommandations bas√©es sur les scores les plus faibles
  sortedCategories.slice(0, 5).forEach((category) => {
    const recommendation = recommendations[category.id]
    if (recommendation) {
      const recommendationElement = document.createElement("div")
      recommendationElement.className = "recommendation-item"
      recommendationElement.innerHTML = `
        <h4>${recommendation.title}</h4>
        <p>${recommendation.text}</p>
      `
      recommendationsContainer.appendChild(recommendationElement)
    }
  })
}

/**
 * Red√©marre le jeu
 */
function restartGame() {
  initializeGame()
}

/**
 * Partage les r√©sultats
 */
function shareResults() {
  const finalScore = calculateFinalScore()
  const category = document.getElementById("score-category").textContent

  const shareText = `üå± J'ai test√© mon impact √©cologique avec EcologIA !

üìä Mon score : ${finalScore}/100
${category}

Et vous, quel est votre impact sur la plan√®te ? 
Testez-vous sur : ${window.location.href}

#EcologIA #√âcologie #D√©veloppementDurable #Test√âcologique`

  // Utilise l'API Web Share si disponible
  if (navigator.share) {
    navigator
      .share({
        title: "Mes r√©sultats √âcoD√©cisions",
        text: shareText,
        url: window.location.href,
      })
      .catch((err) => {
        console.log("Erreur lors du partage:", err)
        fallbackShare(shareText)
      })
  } else {
    fallbackShare(shareText)
  }
}

/**
 * Partage de secours (copie dans le presse-papier)
 */
function fallbackShare(text) {
  if (navigator.clipboard) {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        alert("üìã Texte copi√© dans le presse-papier ! Vous pouvez maintenant le partager sur vos r√©seaux sociaux.")
      })
      .catch(() => {
        showShareModal(text)
      })
  } else {
    showShareModal(text)
  }
}

/**
 * Affiche le texte de partage dans une modal
 */
function showShareModal(text) {
  alert(`üì± Copiez ce texte pour le partager :\n\n${text}`)
}

/**
 * Fonctions utilitaires pour les performances et l'accessibilit√©
 */

// Gestion de la visibilit√© de la page
document.addEventListener("visibilitychange", () => {
  if (document.hidden) {
    // Page cach√©e - on peut pauser les animations
    console.log("EcologIA - Quiz en pause")
  } else {
    // Page visible - on peut reprendre
    console.log("EcologIA - Quiz actif")
  }
})

// Gestion des erreurs JavaScript
window.addEventListener("error", (event) => {
  console.error("Erreur dans le quiz:", event.error)
  // En production, on pourrait envoyer l'erreur √† un service de monitoring
})

// Analytics simul√© (en production, int√©grer Google Analytics ou similaire)
function trackQuizCompletion() {
  const completionData = {
    score: gameState.score,
    finalScore: calculateFinalScore(),
    duration: Date.now() - gameState.startTime,
    answers: gameState.answers.length,
    categoryScores: gameState.categoryScores,
  }

  console.log("Quiz compl√©t√©:", completionData)
  // Ici on enverrait les donn√©es √† un service d'analytics
}

// Appel du tracking quand on affiche les r√©sultats
const originalShowResults = showResults
showResults = () => {
  originalShowResults()
  trackQuizCompletion()
}

// Export pour les tests (si n√©cessaire)
if (typeof module !== "undefined" && module.exports) {
  module.exports = {
    QUIZ_QUESTIONS,
    GAME_CONFIG,
    calculateFinalScore,
    gameState,
  }
}
